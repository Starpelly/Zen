namespace Raylib;

cembed("""
#include <C:/Users/Braedon/Downloads/raylib-master/raylib-master/src/raylib.h>
""");

public struct Vector2
{
    public var float32 x;
    public var float32 y;

    public function this(let float32 x, let float32 y)
    {
        this.x = x;
        this.y = y;
    }
}

public struct Color
{
    public var uint8 r;
    public var uint8 g;
    public var uint8 b;
    public var uint8 a;
    
    public function this(let uint8 r, let uint8 g, let uint8 b, let uint8 a)
    {
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
    }
}

public function void InitWindow(let int width, let int height, let string_view title)
{
    // cembed("InitWindow(@param(width), @param(height), @param(title));");
    cembed("InitWindow(width, height, title);");
}

public function void SetTargetFPS(let int fps)
{
    cembed("SetTargetFPS(fps);");
}

public function bool WindowShouldClose()
{
    cembed("return WindowShouldClose();");
}

public function void CloseWindow()
{
    cembed("CloseWindow();");
}

public function void BeginDrawing()
{
    cembed("BeginDrawing();");
}

public function void EndDrawing()
{
    cembed("EndDrawing();");  
}

public function void ClearBackground(let Color color)
{
    cembed("ClearBackground(CLITERAL(Color){ color.r, color.g, color.b, color.a } );");
}

public function void DrawText(let string_view text, let int x, let int y, let int font_size, let Color color)
{
    cembed("DrawText(text, x, y, font_size, CLITERAL(Color){ color.r, color.g, color.b, color.a });");
}

public function void DrawRectangleV(let Vector2 position, let Vector2 size, let Color color)
{
    cembed("""
    const Vector2 pos = CLITERAL(Vector2) { position.x, position.y };
    const Vector2 sizee = CLITERAL(Vector2) { size.x, size.y };
    const Color colorr = CLITERAL(Color){ color.r, color.g, color.b, color.a };
    DrawRectangleV(pos, sizee, colorr);
    """);
}

public function bool IsMouseButtonDown(let int button)
{
    cembed("""
    return IsMouseButtonDown(button);
    """);
}

public function Raylib::Vector2 GetMousePosition()
{
    // Not guarenteed to work on all compilers.
    // So this shouldn't be standardized.
    cembed("""
    const Vector2 vec = GetMousePosition();
    return *(Raylib_Vector2*)&vec;
    """);
}

public function float GetFrameTime()
{
    cembed("return GetFrameTime();");
}